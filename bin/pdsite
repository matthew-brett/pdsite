#! /usr/bin/env bash

READLINK=readlink
FIND=find
SED=sed
# Need GNU versions of readlink, find, sed on macOS.
if [ `uname` == 'Darwin' ]; then
    if [ -z `which greadlink` ]; then
        echo "Consider installing GNU readlink with 'brew install coreutils'"
        exit 1
    fi
    if [ -z `which gfind` ]; then
        echo "Consider installing GNU find with 'brew install findutils'"
        exit 1
    fi
    if [ -z `which gsed` ]; then
        echo "Consider installing GNU sed with 'brew install gnu-sed'"
        exit 1
    fi
    READLINK=greadlink
    FIND=gfind
    SED=gsed
fi

scriptpath=$($READLINK -f $0)
themespath=${scriptpath%/*}/../themes
defaultconfig=${scriptpath%/*}/../.pdsite.yml.default

function init(){
    cp $defaultconfig .pdsite.yml
}

function build(){

    # Load config variables from file
    if [ -f ./.pdsite.yml ]; then
	configfile=$(pwd)'/.pdsite.yml'
	theme=$(cat $configfile | grep '^theme:' | ${SED} 's|^theme:\s*\(.*\)$|\1|')
	inputextension=$(cat $configfile | grep '^inputextension:' | ${SED} 's|^inputextension:\s*\(.*\)$|\1|')
	outputfolder=$(cat $configfile | grep '^outputfolder:' | ${SED} 's|^outputfolder:\s*\(.*\)$|\1|')
	[ "$theme" ] && [ "$inputextension" ] && [ "$outputfolder" ] || {
	    echo "ERROR: Missing config variables in .pdsite.yml" 1>&2
	    exit 1
	}
    else
	echo "ERROR: .pdsite.yml configuration file not detected" 1>&2
	exit 1
    fi

    themepath=$themespath/$theme
    outputfolder=$($READLINK -f $outputfolder)

    # Build glob expressions
    extensionglob='*'$inputextension
    indexfileglob='*index'$inputextension

    # Define temporary file locations
    globaltree=$outputfolder/tree.yml.tmp
    localtree=localtree.yml.tmp
    localblocktemplate=$outputfolder/localtemplate.yml.tmp
    localblock=local.yml.tmp
    configblock=$outputfolder/config.yml.tmp

    # Define web-safe URL creation from file/directory names
    makeslug(){
	tr -dc '[:graph:][:space:]' | tr '[:upper:]' '[:lower:]' | tr -s ' -_'  | tr ' _' '-'
    }

    # Define human-readable page title creation from web-safe filenames
    makepretty(){
	tr '-' ' ' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1'
    }

    # Set up output folder
    if [ -d $outputfolder ]; then
	echo -n "Clearing old build folder..."
	rm -r $outputfolder/*
    else
	echo -n "Creating new build folder..."
	mkdir $outputfolder
    fi
    echo " done."

    echo -n "Building site..."

    echo -e "\n---" > $configblock
    cat $configfile >> $configblock
    echo -e "...\n" >> $configblock

    echo -e "\n---\npagenameintitle: y\npagename: _\n...\n" > $localblocktemplate

    # Generate base file structure
     ${FIND} -not -path "*/\.*" -type d | makeslug | xargs -I path mkdir -p "$outputfolder"/path
     ${FIND} -not -path "*/\.*" -not -path "$indexfileglob" -path "$extensionglob" -type f | ${SED} 's|\(.*\)\..*|\1|' | makeslug | xargs -I path mkdir -p $outputfolder/path

    # Copy in index files
     ${FIND} -not -path "*/\.*" -path "$indexfileglob" -type f | while read inpath; do
	outpath=$(echo $inpath | makeslug)
	cp "$inpath" "$outputfolder/$outpath"
    done

    # Copy in other content files
     ${FIND} -not -path "*/\.*" -not -path "$indexfileglob" -path "$extensionglob" -type f | while read inpath; do
	outpath=$(echo $inpath | ${SED} 's|\./\(.*\)\.\(.*\)|\1/index.\2|' | makeslug)
	cp "$inpath" "$outputfolder"/"$outpath"
    done

    # Copy in other (non-written-content) files
     ${FIND} -not -path "*/\.*" -not -path "$extensionglob" -type f -exec cp {} "$outputfolder"/{} \;

    cd "$outputfolder"

    # Generate global file structure for navigation templates
    echo -e '\n---' > $globaltree
    tree -dfJ --noreport | cut -c 2- | while read line; do

	# Generate path relative to site root
	path=$(echo $line | grep 'type' | ${SED} 's|.*"name":"\.\(.*\)","contents".*|\1|')

	# Generate pretty page name automatically
	name=$(echo $path | ${SED} 's|.*/\(.*\)|\1|' | makepretty)

	# Inject page name and path into site tree
	echo $line | ${SED} 's|"name":"\(.*\)","contents"|"name":"'"$name"'","path":"'"$path"'","contents"|'

    done >> $globaltree
    echo -e '...\n' >> $globaltree

    # Generate local YAML
     ${FIND} -path "$indexfileglob" -type f | while read line; do

	relpath=${line%/*}
	siteabspath=$(echo $relpath | cut -c 2-)

	# Create local YAML block with auto-generated page name
	name=$(echo ${relpath##*/} | makepretty)
	sed 's|^pagename: _$|pagename: '"$name"'|' $localblocktemplate > $relpath/$localblock

	# Create local YAML block with context-aware file tree data
	sed 's|"path":"'$siteabspath'",|\0"active":y,|' $globaltree > $relpath/$localtree

    done

    # Convert content files to context-aware HTML
     ${FIND} -path "$indexfileglob" -type f -execdir pandoc --template $themepath/template.html --toc -o index.html {} $localtree $localblock $configblock \; -delete

    # Clean up
     ${FIND} -path "*.tmp" -type f -delete

    # Copy in theme assets
    cd "$themepath"
     ${FIND} -not -path "." -type d -exec mkdir -p "$outputfolder"/{} \;
     ${FIND} -not -path "./template.html" -type f -exec cp {} "$outputfolder"/{} \;

    echo " done."
}

function serve(){
    build
    webfsd -Fd -r $outputfolder -f index.html -l -
}

case $1 in
    "init") init;;
    "build") build;;
    "serve") serve;;
    *)
	echo "Unknown command $1"
	exit 1
	;;
esac
